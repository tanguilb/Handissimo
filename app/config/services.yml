# Learn more about services, parameters and containers at
# http://symfony.com/doc/current/book/service_container.html
parameters:
#    parameter_name: value

services:
    admin.organizations:
        class: HandissimoBundle\Admin\OrganizationsAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: Organismes, label: Créer ou modifier une fiche }
        arguments:
            - null
            - HandissimoBundle\Entity\Organizations
            - HandissimoBundle:OrganizationsAdmin
        calls:
            - [ setTemplate, [list, HandissimoBundle:OrganizationsAdmin:list.html.twig]]
           # - [ setTemplate, [form, HandsissimoBundle:OrganizationsAdmin:edit.html.twig]]

    admin.disabilitytypes:
        class: HandissimoBundle\Admin\DisabilityTypesAdmin
        arguments: [~, HandissimoBundle\Entity\DisabilityTypes, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Dossier, label: Types de handicaps }

    admin.structureslist:
        class: HandissimoBundle\Admin\StructuresListAdmin
        arguments: [~, HandissimoBundle\Entity\StructuresList, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Dossier, label: Liste des structures }

    admin.staff:
        class: HandissimoBundle\Admin\StaffAdmin
        arguments: [~, HandissimoBundle\Entity\Staff, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Personnel, label: Personnel de soins }

    admin.socialstaff:
        class: HandissimoBundle\Admin\SocialStaffAdmin
        arguments: [~, HandissimoBundle\Entity\SocialStaff, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Personnel, label: Personnel éducatif et social }

    admin.otherjob:
            class: HandissimoBundle\Admin\OtherJobAdmin
            arguments: [~, HandissimoBundle\Entity\OtherJob, ~]
            tags:
                - { name: sonata.admin, manager_type: orm, group: Personnel, label: Autres métiers }

    admin.needs:
        class: HandissimoBundle\Admin\NeedsAdmin
        arguments: [~, HandissimoBundle\Entity\Needs, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Dossier, label: Services primaires }

    admin.secondaryneeds:
        class: HandissimoBundle\Admin\SecondaryNeedsAdmin
        arguments: [~, HandissimoBundle\Entity\SecondaryNeeds, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Dossier, label: Services secondaires }

    admin.opinion:
        class: HandissimoBundle\Admin\OpinionAdmin
        arguments: [~, HandissimoBundle\Entity\Opinion, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Opinions sur le site, label: Opinions, show_mosaic_button: false }

    admin.solution:
        class: HandissimoBundle\Admin\SolutionAdmin
        arguments: [~, HandissimoBundle\Entity\Solution, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Gestion des demandes de solution, label: Je suis une solution, show_mosaic_button: false }

    admin.comment:
        class: HandissimoBundle\Admin\CommentAdmin
        arguments: [~, HandissimoBundle\Entity\Comment, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Gestion des commentaires, label: Commentaires, show_mosaic_button: false}

    sonata_user.profile.form.type:
        class: Application\Sonata\UserBundle\Form\Type\ProfileType
        arguments: [%fos_user.model.user.class%]
        tags:
            - { name: form.type, alias: application_sonata_user_profile }

    sonata_user.form.handler.profile:
        class: Application\Sonata\UserBundle\Form\Handler\ProfileFormHandler
        arguments: ["@sonata.user.profile.form", "@request", "@fos_user.user_manager"]
        scope: request
        public: false

    user.form.register.type:
        class: Application\Sonata\UserBundle\Form\Type\RegisterType
        parent: fos_user.registration.form.type
        tags:
            - { name: form.type, alias: front_user_registration }

    app.brochure_uploader:
        class: HandissimoBundle\Services\Upload\FileUploader
        arguments: ['%brochures_directory%']

    app.logo_uploader:
        class: HandissimoBundle\Services\Upload\FileUploader
        arguments: ['%logo_directory%']

    handissimo.doctrine_brochure_listener:
        class: HandissimoBundle\EventListener\BrochureUploaderListener
        arguments: ["@app.brochure_uploader"]
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preUpdate }
            - { name: doctrine.event_listener, event: postLoad }


    handissimo.doctrine_logo_listener:
        class: HandissimoBundle\EventListener\LogoUploaderListener
        arguments: ['@app.logo_uploader']
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preUpdate }
            - { name: doctrine.event_listener, event: postLoad }

    handissimo.doctrine_society_logo_listener:
        class: HandissimoBundle\EventListener\SocietyLogoUploaderListener
        arguments: ['@app.logo_uploader']
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preUpdate }
            - { name: doctrine.event_listener, event: postLoad }

    admin.media:
        class: HandissimoBundle\Admin\MediaAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: Organismes, label: Media }
        arguments:
            - null
            - HandissimoBundle\Entity\Media
            - HandissimoBundle:MediaAdmin
        calls:
            - [ setTemplate, [list, HandissimoBundle:MediaAdmin:list.html.twig]]

    handissimo.geocoder:
        class: HandissimoBundle\Services\Geocode\Geocoder

    handissimo.geocoder.listener:
        class: HandissimoBundle\EventListener\GeocoderListener
        arguments: ['@handissimo.geocoder']
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preUpdate }

    handissimo.form.type.boolean:
        class: HandissimoBundle\Form\Type\BooleanType
        tags:
            - { name: form.type, alias: boolean }